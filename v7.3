#include <iostream>
#include <stdio.h>
#include <conio.h>
#include <vector>
#include <string> // dodac ignora dla spacji podczas wpisywania stringow :			getline(cin, str);
#include <fstream>
#include <cstdlib>	// dla konwersji

using namespace std;

class Auto
{
	protected:
		string Marka, Model;
		unsigned int Id;
		bool Oznaczone, Dostepne, Wynajete;
 	public:
 		Auto();
 		Auto(unsigned int, string, string, bool, bool, bool);
 		
 		string GetMarka();
 		string GetModel();
 		unsigned int GetId();
 		bool GetOznaczone();
 		bool GetDostepne();
 		bool GetWynajete();
 		
 		void SetId(unsigned int);
		void SetMarka(string);
 		void SetModel(string);
 		void SetOznaczone(bool);
 		void SetDostepne(bool);
 		void SetWynajete(bool);
};
class Salon :public Auto
{
	protected:
		unsigned int ilosc;
	public:
	//	Salon(unsigned int x, string mar, string mod);
			
		void PokazObecny(vector <Auto> &vec, unsigned int x);	// zamienic pokaz obecny na ustaw obecny - tak aby dalo sie tez modyfikowac i usuwac
		void PokazWszystkie(vector <Auto> &);
		void PokazOznaczone(vector <Auto> &);
		
		void WyszukajPoId()
		void WyszukajPoMarce(vector <Auto> &, string);
		void WyszukajPoModelu
		void WyszukajPoStatusie
		
		void NowyElement(vector <Auto> &, string, string, bool, bool, bool);		//przekazujemy referencje dla wektora
		void Kosz(vector <Auto> &);
		void Usun(vector <Auto> &, unsigned int);
//		void Modyfikacja(vector <Auto> &);
		
//		void SetNext(vector <Auto> &);
//		void SetPrev(vector <Auto> &);
		
		bool CzyDostepny(vector <Auto> &);
		
		void SaveFile(vector <Auto> &vec, bool, string, bool);
        void ReadFile(vector <Auto> &vec, bool, string, char);
};
// -------------------------------------------------------------------------------------------------------
Auto::Auto()
{
	Id = 0;
	Model = "BRAK";
	Marka = "BRAK";
	Oznaczone = 0;
	Dostepne = 0;
	Wynajete = 0;
}

Auto::Auto(unsigned int x, string mar, string mod, bool dos, bool wyn, bool ozn)
{
	Id = x;
	Marka = mar;
	Model = mod;
	Dostepne = dos;
	Wynajete = wyn;
	Oznaczone = ozn;
}

unsigned int Auto::GetId()
{
	return Id;
}
string Auto::GetMarka()
{
	return Marka;
}
string Auto::GetModel()
{
	return Model;
}
bool Auto::GetOznaczone()
{
	return Oznaczone;
}
bool Auto::GetDostepne()
{
	return Dostepne;
}
bool Auto::GetWynajete()
{
	return Wynajete;
}
void Auto::SetId(unsigned int x)
{
	Id = x;
}

void Auto::SetMarka(string ma)
{
	Marka = ma;
}
void Auto::SetModel(string mo)
{
	Model = mo;
}
void Auto::SetOznaczone(bool o)
{
	Oznaczone = o;
}
void Auto::SetDostepne(bool d)
{
	Dostepne = d;
}
void Auto::SetWynajete(bool w)
{
	Wynajete = w;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Salon::NowyElement(vector <Auto> &vec, string ma, string mo, bool dos, bool wyn, bool ozn)		
{
	if(vec.size() == 0)
		ilosc = 0;
	Auto Temp(ilosc, ma, mo, dos, wyn, ozn);			// ilosc podana wewnatrz petli programu 
	vec.push_back(Temp);
	ilosc ++;						// Salon.ilosc ++
//	delete Temp; ??????????????????????????????????????????????????????????????????????????????
}
void Salon::PokazWszystkie(vector <Auto> &vec)
{
	for(unsigned int i=0; i < vec.size(); i++)
	{
		cout << "ID: " << vec[i].GetId() <<" Marka: " << vec[i].GetMarka() << " Model: " << vec[i].GetModel() 
		<< " Dostepne: "<<vec[i].GetDostepne()<<" Wypozyczone: "<<vec[i].GetWynajete()<< " Oznaczone: "<<vec[i].GetOznaczone()<<endl;
	}
}

void Salon::PokazObecny(vector <Auto> &vec, unsigned int x)
{
	cout << "ID: " << vec[x].GetId() <<" Marka: " << vec[x].GetMarka() << " Model: " << vec[x].GetModel() 	
	<< " Dostepne: "<<vec[x].GetDostepne()<<" Wypozyczone: "<<vec[x].GetWynajete()<< " Oznaczone: "<<vec[x].GetOznaczone()<<endl;
}

bool Salon::CzyDostepny(vector <Auto> &vec)		/// rozbudowac o czy auto jest wypozyczone ? i ktore konkretnie auto ?
{
	if (ilosc == 0)			// zwrocic uwage jak zachowa sie podmenu - po modyfikacji tej metody
		return 0;
	else
		return 1;
}
/*
void Salon::Modyfikacja(vector <Auto> &vec)
{
	
}*/
/*
void Salon::SetNext(vector <Auto> &vec)
{
	unsigned int ktory = 0;
	
	if( ktory < (vec.size() -1) )
	{
		ktory++;
		PokazObecny(vec, ktory);
	}
	else if(ktory == (vec.size() - 1) )
	{
		cout << "To juz ostatni element, przejscie do pierwszego" << endl;
		ktory = 0;
	}				
}

void Salon::SetPrev(vector <Auto> &vec)
{
	unsigned int ktory = vec.size() - 1;
	if( ktory > 0 )
	{
		ktory--;
		PokazObecny(vec, ktory);
	}
	else if(ktory == 0 ){
		cout << "To pierwszy element, przejscie do ostatniego" << endl;
		ktory = vec.size() -1 ;
	}
}*/
/////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////

void Salon::Usun(vector <Auto> &vec, unsigned int x)			// przeniesc ta kopie do kosza
{
	system("cls");
	cout << "Usuwamy pozycje: "; PokazObecny(vec, x); cout << "\tT/N"<<endl;
	char potwierdz;
	potwierdz = getch();
	switch(potwierdz)
	{
		case 'T':
		case 't':
			vec.erase(vec.begin() + x );
			ilosc--;
			cout <<"\tusunieto"<<endl;
		break;
		case 'N':
		case 'n':
			cout << "\tnie usunieto"<<endl;
		break;
		default:
			cout << "\tpodano zly znak"<<endl;
		break;
	}
	system("pause");
}
void Salon::Kosz(vector <Auto> &vec)		// dostosowac funkcje dla KOSZA (przeniesienie)
{
	cout << "1 - Usun wszystko\t\t 2 - Przywroc z kosza\t\t3 - Oproznij kosz"<<endl;
	char wybor;
	wybor = getch();
	switch(wybor)
	{
		case '1':
			if(vec.size( ) > 0)
			{
				SaveFile(vec, 1, "kosz.txt", 0);
				vec.clear();
				ilosc = 0;
				cout << "Usunieto wszystkie"<<endl;
			}
			else
			{
				cout <<"\tBaza byla pusta !"<<endl;
			}
		break;
		case '2':
			ReadFile(vec, 1, "kosz.txt", 'K');
		break;
		case '3':
			vec.clear();
			ilosc = 0;
			SaveFile(vec, 1, "kosz.txt", 1);
			cout << "\tKosz oprozniony"<<endl;
		break;
	}
}

void Salon::SaveFile(vector <Auto> &vec, bool zapiszjako, string n, bool pusty)
{
	ofstream plik;	// open file
	if(!zapiszjako)
	{
//		ofstream plik;	
		plik.open("plik.txt");
		for(unsigned int i=0; i < vec.size(); i++)		
		{
			plik << vec[i].GetId() << endl << vec[i].GetMarka() << endl << vec[i].GetModel() <<endl<<vec[i].GetDostepne()<<endl<<vec[i].GetWynajete()<<endl<<vec[i].GetOznaczone()<<endl;
//			cout << vec[i].GetId() << endl << vec[i].GetMarka() << endl << vec[i].GetModel() <<endl<<vec[i].GetDostepne()<<endl<<vec[i].GetWynajete()<<endl<<vec[i].GetOznaczone()<<endl;		
		}		
		
//		plik.close();
	}else
	{
		plik.open(n.c_str());	//dopisek : '| ios::app)' - sprawia ze do pliku bedziemy dopisywac. Zastapienie pliku, nie wymaga dodatkowych oeracji przy edycji 
		if(!pusty)
		{
			for(unsigned int i=0; i < vec.size(); i++)
			{
					plik << vec[i].GetId() << endl << vec[i].GetMarka() << endl << vec[i].GetModel() <<endl<<vec[i].GetDostepne()<<endl<<vec[i].GetWynajete()<<endl<<vec[i].GetOznaczone()<<endl;
//					cout << vec[i].GetId() << endl << vec[i].GetMarka() << endl << vec[i].GetModel() <<endl<<vec[i].GetDostepne()<<endl<<vec[i].GetWynajete()<<endl<<vec[i].GetOznaczone()<<endl;
			}
			
		}
		else
		{
			plik <<"";
		}	
	}
	plik.close();
}

void Salon::ReadFile(vector <Auto> &vec, bool NazwaOK, string n, char wybor)
{
	do{
		
		if(!NazwaOK)
		{
			cout << "Wskaz plik do otwarcia:\n\t1 - wpisz nazwe pliku\t\t2 - ostatnia kopia"<<endl;
			wybor = getch();
		}	
		if(wybor == '1')
		{
			cout << "\twprowadz nazwe pliku (z rozszerzeniem): "; 
			cin >> n;
			NazwaOK = 1;
		}
		else if (wybor == '2')
		{
			n = "plik.txt";
			NazwaOK = 1;
		}
		else if (wybor == 'K')
		{
		//	cout <<"przywrocono dane"<<endl;
		}
		else
		{
			cout << "\tPodano zly znak"<<endl;
		}
	}
	while(!NazwaOK);
	
	fstream plik;
	plik.open(n.c_str(), ios::in);		// tylko odczyt
	if(plik.good() == false )
	{
		cout << "Nie odnaleziono pliku"<<endl;
		system("pause");
		exit(0);	// zamkniecie aplikacji i porzucenie zmian - jesli uzytkownik chcial wczytac plik, to i tak nie zalezalo mu na obecnie wprowadzonych zmianach
	}
	
	string lin, mark, mod;
	bool dost, ozna, wyna;
	int i=1;

	while(getline(plik, lin))
	{
		if( i == 1);
		else if ( i == 2)
		{
			mark = lin;
	//		cout << mark<<endl;
		}
		else if ( i == 3)
		{
			mod = lin;
//			cout << mod<<endl;
		}
		else if ( i == 4)
		{
			if(lin == "0" )					// lin.c_str() == "0"    <- powodowalo konwersje na bool i wszedzie bylo 1
				dost = false;
			else
				dost = true;
				
//		cout << "wew metody dost: "<<dost<<endl;
		}
		else if ( i == 5)
		{
			if(lin == "0" )
				ozna = false;
			else
				ozna = true;
//		cout << "wew metody ozna: "<<ozna<<endl;
		}
		else if ( i == 6)
		{
			if(lin == "0" )
				wyna = false;
			else
				wyna = true;
//		cout << "wew metody wyna: "<<wyna<<endl;
		}
		else
		{
			NowyElement(vec, mark, mod, dost, ozna, wyna);			// zapisanie calego rekordu
			i=1;	
		}
		i++;
	}
	NowyElement(vec, mark, mod, dost, ozna, wyna);					// zapisanie OSTATNIEGO rekordu
	plik.close();
	cout << "Wczytano dane!"<<endl;
}

void Salon::WyszukajPoMarce(vector <Auto> &vec, string n)
{
	bool znaleziony = 0;
	for(unsigned int i=0; i < vec.size(); i++)
		if( vec[i].GetMarka() == n)
		{
			znaleziony = 1;
			cout << "ID: " << vec[i].GetId() <<" Marka: " << vec[i].GetMarka() << " Model: " << vec[i].GetModel() 
			<< " Dostepne: "<<vec[i].GetDostepne()<<" Wypozyczone: "<<vec[i].GetWynajete()<< " Oznaczone: "<<vec[i].GetOznaczone()<<endl;
		}
	if(!znaleziony)
		cout << "\nBrak pojazdu pasujacego do podanego kryterium"<<endl;
}
// ################################################################################################################################
void podopcja(vector <Auto> &vec);		// dla podmenu
Salon s1;								// globalnie dla podmenu
//Auto HH;								// globalnie dla podmenu
// ################################################################################################################################
int main()
{
	vector <Auto> sal;			// inicjalizacja wektoru typu Auto dla salonu

	char opcja;
	do
	{
//		if(opcja != NULL)
//			system("cls");
		cout << "Witaj w programie!\t\t\t\t\tWypozyczalnia v7.3\t\t\tPawel Sierz" << endl;
		cout << "======================================================================================================================\n";
		cout << "1 - WYSZUKAJ  ||  <- tutaj dodac wyszukiwanie po 2 kryteriach i sortowanie wynikow\n";
		cout << "2 - DODAJ  ||  ";
		cout << "3 - WYPOZYCZ  ||  ";
		cout << "4 - ZWROT  ||  ";
		cout << "5 - KOSZ  ||  ";
		cout << "6 - WCZYTAJ  ||  ";
		cout << "7 - ZAPISZ  ||  ";
		cout << " Esc" << endl;
		cout << "======================================================================================================================\n";

		string mar, mod;
		opcja = getch();
//		system("cls");
		switch(opcja)
		{
			case '1' : 
				podopcja(sal);
				system("pause");
				system("cls");
			break;
			case '2' : cout << "Wprowadzasz nowe auto:"<<endl;
					cout << "Podaj, marke: ";
					cin >> mar;
					cout << "Podaj, model: ";
					cin >> mod;
				s1.NowyElement(sal, mar, mod, 0, 0, 0);	
				system("pause");
				system("cls");
			break;
			case '3' : cout << "Wypozycz auto:"<<endl;				
			break;
			case '4' : cout << "Zwrot auta:"<<endl;				
			break;
			case '5' :
				s1.Kosz(sal);
				system("pause");
				system("cls");
			break;
			// --------------------------------------------------------------------------------------------------------------
			default:
				system("cls");
			break;
			case '6' :
				s1.ReadFile(sal, 0, " ", 'q');
				system("pause");
				system("cls");
			break;
			case '7' :
				s1.SaveFile(sal, 0, "plik.txt", 0);
				cout << "zapisano"<<endl;
				system("pause");
				system("cls");
			break;
			case 27 : 
				char zapisz;
				bool wyjscie = 0;
				do
				{
					cout << "Czy zapisac wprowadzone zmiany? (Y/N): "<< endl;		// opcja zapisz jako
					zapisz = getch();
					if(zapisz == 'Y' or zapisz == 'y')
					{
						bool zapiszjako;
						string nazwa;
						cout << "\tCzy chcesz zapisac plik pod nowa nazwa? (Y/N)"<<endl;
						zapisz = getch();
						if(zapisz == 'Y' or zapisz == 'y')
						{
							zapiszjako = 1;
							cout << "\twprowadz nazwe pliku z rozszerzeniem (np .txt) : "; 
							cin >> nazwa;
						}
						else if(zapisz == 'N' or zapisz == 'n')
						{
							zapiszjako = 0;
						}
						s1.SaveFile(sal, zapiszjako, nazwa, 0);
						cout << "\tZapisano"<< endl;
						wyjscie = 1;
					}
					else if(zapisz == 'N' or zapisz == 'n')
					{
						cout << "\tNie zapisano"<< endl;
						wyjscie = 1;
					}
					else
					{
						cout << "Wprowadzono zly znak!" << endl;
					}
				}while(!wyjscie);
			system("pause");
			system("cls");
		}
	}while(opcja!= 27);
	return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void podopcja(vector <Auto> &vec)
{
	bool powrot = 0;
	unsigned int ktory, id;
	string marka, model;
	
	char x, znak;
	do
	{
		if (s1.CzyDostepny(vec))			// czy sa elementy w wektorze
		{
			system("cls");
			cout << "Wyszukiwanie po:"<<endl;
			cout << "\tID - 1   Marka - 2   Model - 3   Status pojazdu - 4   Przeglad calej listy - 0" <<endl;
		
			if(vec.size() == 1)		// a co z usuwaniem // jesli zostal jedyny element - to jego id = 0;
				ktory=0;

			cout <<endl<< "Bieazcy element: "; s1.PokazObecny(vec, ktory);
			cout << "\tNastepny element - 'N'\tPoprzedni element - 'B'\t Oznacz element - 'Q'"<<endl<<endl;
				
			x = getch();
			switch(x)
			{
				case 'n':
				case 'N':
					if( ktory < (vec.size() -1) ){
						ktory++;
						s1.PokazObecny(vec, ktory);
					}
					else if(ktory == (vec.size() - 1) ){
						cout << "To juz ostatni element, przejscie do pierwszego" << endl;
						ktory = 0;
					}
//					s1.SetNext(vec);
				break;
				case 'b':
				case 'B':
					if( ktory > 0 ){
						ktory--;
						s1.PokazObecny(vec, ktory);
					}
					else if(ktory == 0 ){
						cout << "To pierwszy element, przejscie do ostatniego" << endl;
						ktory = vec.size() -1 ;
					}
//					s1.SetPrev(vec);
				break;
				case 'q':
				case 'Q':
					s1.Usun(vec, ktory);
//					s1.Modyfikacja(vec);			zmienic na oznaczi nastepnie usun / wypozycz / zmien status itd
					powrot = 1;
				break;
				case '1' :
					cout << "Wpisz ID pojazdu: "; cin >> id;
					cout << "\t\t\t\tTwoje wpisy:\tID:"<<id<<" Marka: "<<marka<<" Model: "<<model<<endl;
					cout << "\tczy chcesz podac kolejne kryterium wyszukiwania ? (T/N)\t"; znak = getch();
					if (znak == 'N' || znak == 'n')
					{
						s1.PokazObecny(vec, id);
						powrot = 1;
						break;
					}
					if (znak == 'T' || znak == 't')
					{
						cout << 'T';
						continue;
					}
				case '2' :
					cout << "Wpisz MARKE pojazdu: "; cin >> marka;
					cout << "\t\t\t\tTwoje wpisy:\tID:"<<id<<" Marka: "<<marka<<" Model: "<<model<<endl;
					cout << "\tczy chcesz podac kolejne kryterium wyszukiwania ? (T/N)\t"; znak = getch();
					if (znak == 'N' || znak == 'n')
					{
						s1.WyszukajPoMarce(vec, marka);
						powrot = 1;
						break;
					}
					if (znak == 'T' || znak == 't')
					{
						cout << 'T';
						continue;
					}
				case '3' :
					cout << "trzy"<<endl;
					
					powrot = 1;
				break;
				case '4' :
					powrot = 1;
				break;
				case '0' : 
					s1.PokazWszystkie(vec);		
					powrot = 1;
				break;
				default:
					powrot = 1;
				break;
			}	
		}
		else
		{
			cout << "Brak pojazdow w salonie !!!"<< endl;
			powrot = 1;
		}
	}while(!powrot);
}
